name: Deploy Application Docker Image to EC2 instance

on:
  push:
    branches: [main]

jobs:
  Continuous-Integration:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.set_image.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      # Free up space before build
      - name: Free disk space before build
        run: |
          echo "Before cleanup:"
          df -h
          docker system prune -af --volumes || true
          sudo rm -rf /opt/hostedtoolcache || true
          echo "After cleanup:"
          df -h

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Create ECR repository if not exists
        env:
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY >/dev/null 2>&1 || \
          aws ecr create-repository --repository-name $ECR_REPOSITORY

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR with cache
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: |
          docker buildx build \
            --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --platform linux/amd64 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            --push .
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Set image output
        id: set_image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
          IMAGE_TAG: latest
        run: echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # Final cleanup to avoid filling disk for future jobs
      - name: Cleanup after build
        if: always()
        run: |
          docker system prune -af --volumes || true
          rm -rf /tmp/.buildx-cache || true

  Continuous-Deployment:
    needs: Continuous-Integration
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Pull new image (if available)
        run: |
          echo "Pulling new image..."
          docker pull ${{ needs.Continuous-Integration.outputs.image }} || echo "No new image found, continuing..."

      - name: Start new container before stopping old one
        run: |
          echo "Starting new container..."
          docker run -d \
            --name myapp_new \
            --restart unless-stopped \
            -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
            -e AWS_DEFAULT_REGION="${{ secrets.AWS_DEFAULT_REGION }}" \
            -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            -p 8080:8080 \
            ${{ needs.Continuous-Integration.outputs.image }}

      - name: Stop and remove old container
        run: |
          if docker ps -q --filter "name=myapp" | grep -q .; then
            echo "Stopping old container..."
            docker stop myapp && docker rm myapp
          fi

      - name: Rename new container to myapp
        run: |
          echo "Renaming container..."
          docker rename myapp_new myapp
